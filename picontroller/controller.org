* Objective

To define a useful library for people to control the robot without worrying too much about the low level implementation.
Effectively, think high level and let my library deal with low level control of motor controllers.

* Direction
** Compass
So the motor controller has directions expressed as numbers but I'd rather have programmers use more intuitive units.
This is why the convertDirectionsToNumber function exists - you can think in terms on North, South or North-East and write code like that.

Keep in mind that all directions are in terms of the robot's frame of reference and not the frame of reference of the arena.

|-----------+--------|
| Direction | Number |
|-----------+--------|
| N         |      1 |
| NE        |      2 |
| E         |      3 |
| SE        |      4 |
| S         |      5 |
| SW        |      6 |
| W         |      7 |
| NW        |      8 |
| CW        |      9 |
| CCW       |     10 |
|-----------+--------|

#+NAME: direction
#+BEGIN_SRC python :tangle direction/compass.py 
class Compass(object):
  N, NE, E, SE, S, SW, W, NW = range(1,9)
  CW, CCW = range(9,11)


  def __init__(self,value):
    if isinstance(value,basestring):
      self.value = Compass.convert(value) #If the user enters in a string instead of a number or the class defined static variables, convert it to the string.
    elif 1 <= value <= 10:
      self.value = value
    else:
      raise CompassError

  def __repr__(self):
    if 1 <= self.value <= 10:
      return "Compass." + Compass.convert(self.value)  #Should return the string representation of the value
    else:
      raise CompassError('Value contained is unrepresentable.')
  @staticmethod
  def convert(direction = None):

    #Sanitizing inputs
    if direction == None:
        raise CompassError('No input. Please enter valid input')


    # If the input is a number, return a string
    if 1 <= direction <= 10:

      directionList = {
        1:"N",
        2:"NE",
        3:"E",
        4:"SE",
        5:"S",
        6:"SW",
        7:"W",
        8:"NW",
        9:"CW",
        10:"CCW"
      }
      direction_raw = directionList.get(direction, None)
      if direction_raw is not None:
          return direction_raw
      else:
          raise CompassError('Please enter valid integer number from 1 to 10')



    # If the input is a string, return a number
    if isinstance(direction, basestring):
      
      directionList = {
          # Actual Directions
          "N"   : Compass.N,
          "NE"  : Compass.NE,
          "E"   : Compass.E,
          "SE"  : Compass.SE,
          "S"   : Compass.S,
          "SW"  : Compass.SW,
          "W"   : Compass.W,
          "NW"  : Compass.NW,
          # Spins the robot
          "CW"  : Compass.CW,
          "CCW" : Compass.CCW
      }
      direction_raw = directionList.get(direction, None)
      if 1 <= direction_raw <= 10:
          return direction_raw
      else:
          raise CompassError('Invalid input. Please enter valid string')

      # Somehow, you've reached here. This should not happen but whatever, raise the error
      
      raise CompassError('Invalid input - input entered is neither string nor number')




# Defining keywords for people to use
# When this package is imported, the user should be able to use the keywords without worrying about refering to the correct class name.
# In short, they can use N, NW and so on without saying CompassDirection.N or anything like that.


N   = Compass.N
NE  = Compass.NE
E   = Compass.E
SE  = Compass.SE
S   = Compass.S
SW  = Compass.SW
W   = Compass.W
NW  = Compass.NW
CW  = Compass.CW
CCW = Compass.CCW
#+END_SRC 

*** CompassError
Compass Error exists because ValueError is kind of vague and I'd like my errors to be be a bit more specific. 
I'd heavily discourage anyone from using this error if they're not dealing with the Compass class directly.
#+BEGIN_SRC python :tangle direction/compass.py 

class CompassError(ValueError):
    def __init__(self,*args,**kwargs):
        ValueError.__init__(self,*args,**kwargs)

#+END_SRC
*** Unit Tests
#+BEGIN_SRC python :tangle tests/direction/compass.py

import unittest
import picontroller.direction.compass

print(N)


#+END_SRC

** Vector

So we're going to implment a quick and dirty wrapper around numpy's vectors so that I can use them wherever I need vectors. 
Also, I might change from numpy to a another library but who knows.

#+BEGIN_SRC python :tangle direction/vector.py
import numpy

#SDSDFDSFSD

class Vector(numpy.ndarray):

    def __new__(cls, x=None, y=None, info=None):

        # Sanitizing x and y values
        if x == None or y == None:
          raise VectorError('Incomplete vector input')

        def is_number(s):
            try:
                float(s)
                return True
            except VectorError:
                return False
        
        if not (is_number(x) and is_number(y)):
          raise VectorError('Incorrect vector input. Please use numbers only')
      
        # We need to make ndarray instance using x and y values.
        input_array = numpy.array([x,y])

        # We first cast to be our class type
        obj = numpy.asarray(input_array).view(cls)
        # add the new attribute to the created instance
        obj.info = info
        # Finally, we must return the newly created object:
        return obj

    def __array_finalize__(self, obj):
        # see InfoArray.__array_finalize__ for comments
        if obj is None: return
        self.info = getattr(obj, 'info', None)

    def __repr__(self):
        return "< "+str(self[0])+" "+str(self[1])+" >"

    def mag(self):
      return numpy.sqrt(self.dot(self))

if __name__=="__main__":
    start = Vector(1,2)
    finish = Vector(4,5)

    distance = finish - start
    print(distance)
#+END_SRC
*** VectorError
I like better named exceptions.
#+BEGIN_SRC python :tangle direction/vector.py

class VectorError(ValueError):
    def __init__(self,*args,**kwargs):
        ValueError.__init__(self,*args,**kwargs)

#+END_SRC

*** Unit tests
#+BEGIN_SRC python :tangle tests/direction/vector.py
import unittest

#from VectorDirection import VectorDirection

class VectorDirectionTestCase(unittest.TestCase):
    """Tests for Vector Direction."""

    def add(self):
        """Is five successfully determined to be prime?"""
        self.assertTrue()
#+END_SRC 

* Instruction

 So this is the function that sends instructions to the motor controller using the serial library.
 The serial port used is /dev/ttyACM0 with baud rate 9600.
 When using this particular function, please give directions as N, NW and the like.


So why are we not defining this as some kind of function? Because I'd like to be able to reuse commands as much as possible AND because it makes more sense to write down commands and then execute them whenever required instead of creating wrapper functions around one main function.
- Logger 
The logger is to see what instructions are actually sent to the robot - I'm guessing that we'll need to look at the logs at some point even if we write perfect code.
I've also written a nice bash script that clears the log instead of us having to delete the file manually - it will probably be incorporated into whatever cleanup scripts the other programmers come up with.

#+NAME: Instruction
#+BEGIN_SRC python :tangle instruction/instruction.py
import logging #This is to send logs of instructions sent directly to robot.
import serial # Serial interface to talk to robot's motor controllers

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# create a file handler
handler = logging.FileHandler('instruction.log')
handler.setLevel(logging.INFO)
logger.addHandler(handler)

class Instruction(object):
  def __init__(self,direction = None, power = None, time = None):
    
    
    # Serial interface. Gonna be hardcoded for now. I'm sorry, future Vi.
    self.ser = serial.Serial("/dev/ttyACM0", 9600) #The only interface we talk to.

    #sanitizing input
    if direction_input == None or power_input == None or time_input == None:
      raise ValueError('Invalid input. Please enter valid input.') # Honestly, we should be saying that the default setting is something. But I want the users to actually say something. They can put default values in later.

    if not (0 <= power <= 100):
      raise ValueError('Invalid input. Power is a quantity between 0 and 100.')

    if not (time >= 0):
      raise ValueError('Invalid input. Time must always be a positive quantity.')

    # Actually saving input.
    self.direction = direction
    self.power = power
    self.time = time

  def execute(self):
    
    def convertToSerialString(direction,power,time):
      return str(direction) + " " + str(power) + " " + str(time)

    instruction = convertToSerialString(self.direction,self.power,self.time)
    logger.info(instruction)
    self.ser.write(instruction)         #Actually send stuff to the robot.

  @staticmethod  
  def stop():
    Instruction(0,0,0).execute()
 #+END_SRC

*** InstructionError
Because this particular class is called really often and I'd like for my arguments to be better named.
#+BEGIN_SRC python :tangle instruction/instruction.py

#+END_SRC
*** Bash Script to clean logs
Bash script to clean the logs of whatever instructions are given to the robot.
#+BEGIN_SRC bash :tangle no



#+END_SRC
*** Unit Tests
#+BEGIN_SRC bash :tangle no



#+END_SRC

* Position
** Coordinate
 #+BEGIN_SRC python :tangle position/coordinate.py
import numpy
class Coordinate(numpy.ndarray):
    def __new__(cls, x=None, y=None, info=None):
        # Sanitizing x and y values
       if x == None or y == None:
         raise ValueError('Incomplete coordinate input')
       def is_number(s):
           try:
               float(s)
               return True
           except ValueError:
               return False
      
       if not (is_number(x) and is_number(y)):
         raise ValueError('Incorrect input. Please use numbers only')
    
       # We need to make ndarray instance using x and y values.
       input_array = numpy.array([x,y])
        # We first cast to be our class type
       obj = numpy.asarray(input_array).view(cls)
       # add the new attribute to the created instance
       obj.info = info
       # Finally, we must return the newly created object:
       return obj
    def __array_finalize__(self, obj):
       # see InfoArray.__array_finalize__ for comments
       if obj is None: return
       self.info = getattr(obj, 'info', None)

if __name__=="__main__":
    start = Coordinate(1,2)
    finish = Coordinate(4,5)
    print("The distance between start and finish is")
    distance = finish - start
    print(distance)
 #+END_SRC

* Robot

Acts as an adapter between the higher-level interface users use and the Instruction class that sends instructions to the robot.

The move function accepts three types of inputs - compass points, vector directions and coordinate points. All three types of inputs are logged and each one updates the current position of the robot.

#+BEGIN_SRC python :tangle robot/robot.py
import piController.position.coordinate as coordinate
import piController.direction.vector as vector
import piController.direction.compass as compass

class Robot(object):
#  def __init__(self):

  def __init__(self,position=None):
    if (position is None) or (type(position) is not Coordinate):
      raise ValueError('Initial location is not specified')
    self.position = position

  def move(self, direction=None,distance=None):
    
    if type(direction) is compass.Compass:
      # The user has given a compass point and expects us to move to that location. This is where things can get a littlw awry.
      directionMove(direction,distance)
    if type(direction) is vector.Vector:
      # The user has given a vector and expects us to move to that location. 
      #If the distance is not specified, simply take the length of the vector. If distance is specified, use the distance instead.
      vectorMove(direction,distance)



  
  def vectorMove(self,vector=None,distance=None):
    if vector is None:
      raise ValueError("The vector input is not specified.")
    if type(vector) is not vector.Vector:
      raise ValueError("The vector input needs to be a vector")

    if distance is None:
    # If distance is none, change distance to the magnitude of the vector and use that.
      distance = vector.mag()
      
    #Convert the vector input into its norm. We're just going to divide the vector by its magnitude.
    vector = vector/vector.mag()


  def directionMove(self,direction=None,distance=None):
    # So I'm going to convert the distance into power and time values. Not very clean but it should work for now.

    instruction = Instruction(direction = 1, power = 100, time = 1000)
    instruction.execute()
    instruction.stop()




    # Now, we need to convert a vector & distance into instructions for the robot. I'm implementing a naive way of doing it (assuming that 
#+END_SRC 

* Kalman Filter
This is definitely not a copy paste from the internet. Pinky promise. It's totally a program that's had to be converted to an atual OOP paradigm. Why am I doing this?!?! I'm a fucking functional programmer.

Note: I guess this is going to be done on the arduino now? Not too sure how it's going to be implemented. For now, I'm just going to assume that I don't have to deal with it.
#+BEGIN_SRC python :tangle filter/kalmanFilter.py

class KalmanFilter(object):

    def __init__(self, processVariance, estimatedMeasurementVariance):
        self.processVariance = processVariance
        self.estimatedMeasurementVariance = estimatedMeasurementVariance
        self.posteriEstimate = 0.0
        self.posteriErrorEstimate = 1.0

    def inputLatestNoisyMeasurement(self, measurement):
        prioriEstimate = self.posteriEstimate
        prioriErrorEstimate = self.posteriErrorEstimate + self.processVariance

        blending_factor = prioriErrorEstimate / (prioriErrorEstimate + self.estimatedMeasurementVariance)
        self.posteriEstimate = prioriEstimate + blendingFactor * (measurement - prioriEstimate)
        self.posteriErrorEstimate = (1 - blendingFactor) * prioriErrorEstimate

    def get_latest_estimated_measurement(self):
        return self.posteriEstimate




if __name__ == "__main__":
    import random
    iteration_count = 500

    actual_values = [-0.37727 + j * j * 0.00001 for j in xrange(iteration_count)]
    noisy_measurement = [random.random() * 2.0 - 1.0 + actual_val for actual_val in actual_values]

    # in practice we would take our sensor, log some readings and get the
    # standard deviation
    import numpy
    measurement_standard_deviation = numpy.std([random.random() * 2.0 - 1.0 for j in xrange(iteration_count)])

    # The smaller this number, the fewer fluctuations, but can also venture off
    # course...
    process_variance = 1e-3
    estimated_measurement_variance = measurement_standard_deviation ** 2  # 0.05 ** 2
    kalman_filter = KalmanFilter(process_variance, estimated_measurement_variance)
    posteri_estimate_graph = []

    for iteration in xrange(1, iteration_count):
        kalman_filter.input_latest_noisy_measurement(noisy_measurement[iteration])
        posteri_estimate_graph.append(kalman_filter.get_latest_estimated_measurement())



    import pylab
    pylab.figure()
    pylab.plot(noisy_measurement, color='r', label='noisy measurements')
    pylab.plot(posteri_estimate_graph, 'b-', label='a posteri estimate')
    pylab.plot(actual_values, color='g', label='truth value')
    pylab.legend()
    pylab.xlabel('Iteration')
    pylab.ylabel('Voltage')
    pylab.show()

#+END_SRC
